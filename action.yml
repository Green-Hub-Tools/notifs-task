name: 'Pull Request notification for tasks'
description: 'This action is used to send notification to eXo Tasks during the Pull Request workflow (creation, approval, closing, merge).'
inputs:
  SERVER_URL:
    description: Target Server URL
    required: true
  SERVER_DEFAULT_SITENAME:
    description: Target Server Default Sitename
    required: false
    default: "dw"
  SERVER_USERNAME:
    description: Target Server username
    required: true
  SERVER_PASSWORD:
    description: Target Server user password
    required: true
  TASKS_REGEX_FILTER:
    description: Pull request tasks regex filter
    required: false
    default: "(task|maint|exo)((-|_)[0-9]{4,})+"
  GITHUB_TOKEN:
    description: Github token (default repository token)
    required: false
    default: ""
runs:
  using: "composite"
  steps:
    - name: PLF Tasks Webhook
      shell: bash
      run: |
        doGetCurl() {
          curl -A "PR Webhook Tasks/1.0" -s -f -L -u ${SERVER_USERNAME}:${SERVER_PASSWORD} -XGET $*
        }
        doGetAssociatedUsername() {
          doGetCurl "${SERVER_GAMGH_CONNECTOR_REST_URL}?connectorUserId=${1}" || echo ""
        }
        doGetUserProfile() {
          doGetCurl "${SERVER_URL}/rest/private/v1/social/users/${1}" || echo ""
        }
        if [[ ! ${base_branch_name} =~ ^(master|develop(-exo|-meed)?|feature\/[A-Za-z-]+[0-9]?|stable\/[0-9]+(\.[0-9]+)*\.x(-exo)?)$ ]]; then
          echo "‚ùå Branch ${base_branch_name} is not supported for Task notification. Aborting."
          exit 0
        fi
        if [[ ${creator} =~ ^(dependabot\[bot\]|snyk-bot)$ ]]; then
          echo "ü§ñ PR created by a bot user is not supported for Task notification. Aborting."
          exit 0
        fi
        if ! echo ${message:-} | grep -qioP "${TASKS_REGEX_FILTER}"; then
          echo "üö´ No relevant tasks found in the PR title. Aborting."
          exit 0
        fi
        TASKS_IDS="$(echo ${message:-} | grep -ioP "${TASKS_REGEX_FILTER}" | grep -oP '[0-9]+' | xargs)"
        echo "OK Task(s) found! Starting notifications..."
        reducedBaseBranchName=$(echo ${base_branch_name} | sed -e 's|feature/||gi' -e 's|stable/||gi')
        link="PR <a href=\"https://github.com/${full_repo_name}/pull/${pull_number}\" title=\"${full_repo_name}#${pull_number}:${base_branch_name}\" target=\"_blank\">${repo_name}#${pull_number}:${reducedBaseBranchName}</a>"
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          if [ "${{ github.event.action }}" = "review_requested" ]; then
            serverUser=$(doGetAssociatedUsername "${requested_reviewer}" || echo "")
            if [ ! -z "${serverUser}" ]; then
              echo "üëÄ Review requested from ${serverUser}."
              msg="üí≠ $link is awaiting a review from @${serverUser} "
            else
              echo "‚ùå Unable to retrieve Server user identifier! Aborting."
              exit 0
            fi
          elif [ "${{ github.event.pull_request.merged }}" = "true" ]; then
            shortCommitId=$(echo ${{ github.event.pull_request.merge_commit_sha }} | cut -c1-7)
            mergeMethod="merged"
            if [ "${{ github.event.pull_request.auto_merge }}" != "null" ] && [ "${{ github.event.pull_request.auto_merge }}" != "" ]; then 
              mergeMethod="automatically ${{ github.event.pull_request.auto_merge.merge_method }}-merged"
            fi
            mergedCommitlink="<a href=\"https://github.com/${full_repo_name}/commit/${{ github.event.pull_request.merge_commit_sha }}\" target=\"_blank\">${shortCommitId}</a>"
            base_branch_link="<a href=\"https://github.com/${full_repo_name}/tree/${base_branch_name}\" target=\"_blank\">${base_branch_name}</a>"
            mergerGithubUser="${{ github.event.pull_request.merged_by.login }}"
            mergerServerUser=$(doGetAssociatedUsername "${mergerGithubUser}")
            if [ -z "${mergerServerUser}" ]; then 
              echo "‚ùå Unable to retrieve merger's server user identifier! Using Github username instead."
              mergerServerFullName="${mergerGithubUser}"
              mergerServerLink="üëæ <a target=\"_self\" rel=\"noopener\" href=\"https://github.com/${mergerGithubUser}\" class=\"user-suggester\">${mergerServerFullName}</a>"
            else
              mergerServerProfile=$(doGetUserProfile "${mergerServerUser}")
              mergerServerFullName="$(echo ${mergerServerProfile} | jq -r .fullname)"
              mergerServerLink="<a target=\"_self\" rel=\"noopener\" href=\"/portal/${SERVER_DEFAULT_SITENAME}/profile/${mergerServerUser}\" class=\"user-suggester\">${mergerServerFullName}</a>"
            fi
            if [ -z "${mergerServerFullName:-}" ] || [ "${mergerServerFullName:-}" = "null" ]; then 
              msg="üåü $link was ${mergeMethod} as ${mergedCommitlink} into ${base_branch_link}."
            else
              msg="üåü $link was ${mergeMethod} as ${mergedCommitlink} into ${base_branch_link} by ${mergerServerLink}."
            fi
          elif [ "${{ github.event.action }}" = "closed" ]; then
            msg="üçÇ $link has been ${{ github.event.action }}."
          elif [ "${{ github.event.action }}" = "opened" ]; then
            msg="üå± $link has been created."
          elif [ "${{ github.event.action }}" = "reopened" ]; then
            msg="üçÉ $link has been reopened."
          else
            msg="‚ÑπÔ∏è $link has been updated with action: ${{ github.event.action }}."
          fi
        elif [ "${{ github.event_name }}" = "pull_request_review" ] && [ "${{ github.event.action }}" = "submitted" ]; then
          mentionCreator=""
          commentMentionFilterRegex='( |^)@[a-zA-Z0-9]+-?[a-zA-Z0-9]+( |$)'
          response=$(doGetAssociatedUsername "${creator}")
          [ -z "${response}" ] || mentionCreator=" FYI @${response} "
          reviewerGithubUser="${{ github.event.review.user.login }}"
          reviewerServerUser=$(doGetAssociatedUsername "${reviewerGithubUser}")
          if [ -z "${reviewerServerUser}" ]; then 
            echo "‚ùå Unable to retrieve reviewer's server user identifier! Using Github username instead."
            reviewerServerFullName="${reviewerGithubUser}"
            reviewerServerLink="üëæ <a target=\"_self\" rel=\"noopener\" href=\"https://github.com/${reviewerGithubUser}\" class=\"user-suggester\">${reviewerServerFullName}</a>"
          else
            reviewerServerProfile=$(doGetUserProfile "${reviewerServerUser}")
            reviewerServerFullName="$(echo ${reviewerServerProfile} | jq -r .fullname)"
            reviewerServerLink="<a target=\"_self\" rel=\"noopener\" href=\"/portal/${SERVER_DEFAULT_SITENAME}/profile/${reviewerServerUser}\" class=\"user-suggester\">${reviewerServerFullName}</a>"
          fi
          reviewEventLink="${{ github.event.review.html_url }}"
          if [ "${{ github.event.review.state }}" = "changes_requested" ]; then
            requestChangesEventLink="<a href=\"$reviewEventLink\">changes</a>"
            if [ -z "${reviewerServerFullName:-}" ] || [ "${reviewerServerFullName:-}" = "null" ]; then 
              msg="üõ†Ô∏è $link requires ${requestChangesEventLink}.${mentionCreator}"
            else 
              msg="üõ†Ô∏è $link requires ${requestChangesEventLink} from ${reviewerServerLink}.${mentionCreator}"
            fi
          elif [ "${{ github.event.review.state }}" = "approved" ]; then
            approvedEventLink="<a href=\"$reviewEventLink\">approved</a>"
            mergeableStatus="$(gh pr view ${pull_number} --repo ${clone_url} --json mergeable -q .mergeable)"
            if [ "${mergeableStatus}" = "MERGEABLE" ]; then
              mergeCheckMessage=" (‚úÖ Cleared to merge)"
            elif [ "${mergeableStatus}" = "UNKNOWN" ]; then
              mergeCheckMessage=" (‚ùå Merge conflicts detected)"
            else
              mergeCheckMessage=""
            fi
            if [ -z "${reviewerServerFullName:-}" ]; then 
              msg="‚úÖ $link has been ${approvedEventLink}${mergeCheckMessage}.${mentionCreator}"
            else 
              msg="‚úÖ $link has been ${approvedEventLink}${mergeCheckMessage} by ${reviewerServerLink}.${mentionCreator}"
            fi
          elif [ "${{ github.event.review.state }}" = "commented" ]; then
            if [[ "${{ github.event.review.body }}" =~ $commentMentionFilterRegex ]]; then
              mentionEventLink="<a href=\"$reviewEventLink\" target=\"_blank\">mentioned</a>"
              mentionedGithubUsers=$(echo "${{ github.event.review.body }}" | grep -oP "$commentMentionFilterRegex" | tr -d '@' | xargs)
              mentionedServerUsers=""
              for mentionedGithubUser in ${mentionedGithubUsers}; do 
                response=$(doGetAssociatedUsername "${mentionedGithubUser}")
                [ -z "${response}" ] && continue
                [ -z "${mentionedServerUsers}" ] && mentionedServerUsers="@${response}" || mentionedServerUsers="${mentionedServerUsers} and @${response}"
              done
              [ -z "${mentionedServerUsers}" ] && mentionedServerUsers="$(echo $mentionedGithubUsers | wc -w ) user(s)"
              msg="üôã $link has ${mentionEventLink} ${mentionedServerUsers} in a comment by ${reviewerServerLink}."
            else
              commentEventLink="<a href=\"$reviewEventLink\" target=\"_blank\">commented</a>"
              msg="üí¨ $link has been ${commentEventLink} by ${reviewerServerLink}.${mentionCreator}"
            fi
          else
            stateEventLink="<a href=\"$reviewEventLink\">${{ github.event.review.state }}</a>"
            msg="‚ÑπÔ∏è $link has been ${stateEventLink}."
          fi
        fi
        echo "*** Message is:"
        echo ${msg}
        echo "***"
        for TASK_ID in ${TASKS_IDS}; do
          echo "Commenting to Task #${TASK_ID}..."
          curl -so /dev/null -w '%{http_code}' --retry 3 --retry-max-time 60 -L -u ${SERVER_USERNAME}:${SERVER_PASSWORD} -XPOST --data-raw "<p>${msg}</p>" "${SERVER_TASK_REST_PREFIXE_URL}/comments/${TASK_ID}"
        done
      env:
        SERVER_URL: ${{ inputs.SERVER_URL }}
        SERVER_USERNAME: ${{ inputs.SERVER_USERNAME }}
        SERVER_PASSWORD: ${{ inputs.SERVER_PASSWORD }}
        SERVER_TASK_REST_PREFIXE_URL: ${{ inputs.SERVER_URL }}/rest/private/tasks
        SERVER_GAMGH_CONNECTOR_REST_URL: ${{ inputs.SERVER_URL }}/rest/private/gamification/connectors/username/github
        TASKS_REGEX_FILTER: ${{ inputs.TASKS_REGEX_FILTER }}
        SERVER_DEFAULT_SITENAME: ${{ inputs.SERVER_DEFAULT_SITENAME }}
        GH_TOKEN: ${{ inputs.GITHUB_TOKEN || github.token }}
        message: ${{ github.event.pull_request.title }}
        state: ${{ github.event.pull_request.state }}
        pull_number: ${{ github.event.pull_request.number }}
        requested_reviewer: ${{ github.event.requested_reviewer.login }}
        creator: ${{ github.event.pull_request.user.login }}
        full_repo_name: ${{ github.event.repository.full_name }}
        repo_name: ${{ github.event.repository.name }}
        base_branch_name: ${{ github.event.pull_request.base.ref }}
        clone_url: ${{ github.event.pull_request.head.repo.clone_url }}

branding:
  icon: "bell"
  color: "gray-dark"
